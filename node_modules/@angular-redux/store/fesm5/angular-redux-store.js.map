{"version":3,"file":"angular-redux-store.js.map","sources":["ng://@angular-redux/store/components/ng-redux.ts","ng://@angular-redux/store/components/dev-tools.ts","ng://@angular-redux/store/utils/get-in.ts","ng://@angular-redux/store/utils/set-in.ts","ng://@angular-redux/store/components/fractal-reducer-map.ts","ng://@angular-redux/store/decorators/helpers.ts","ng://@angular-redux/store/decorators/dispatch.ts","ng://@angular-redux/store/decorators/select.ts","ng://@angular-redux/store/decorators/with-sub-store.ts","ng://@angular-redux/store/utils/assert.ts","ng://@angular-redux/store/components/selectors.ts","ng://@angular-redux/store/components/sub-store.ts","ng://@angular-redux/store/components/root-store.ts","ng://@angular-redux/store/ng-redux.module.ts"],"sourcesContent":["import {\n  AnyAction,\n  Dispatch,\n  Middleware,\n  Reducer,\n  Store,\n  StoreEnhancer,\n  Unsubscribe,\n} from 'redux';\nimport { Observable } from 'rxjs';\nimport { ObservableStore } from './observable-store';\nimport { Comparator, PathSelector, Selector } from './selectors';\n\n/**\n * This is the public interface of @angular-redux/store. It wraps the global\n * redux store and adds a few other add on methods. It's what you'll inject\n * into your Angular application as a service.\n */\nexport abstract class NgRedux<RootState> implements ObservableStore<RootState> {\n  /** @hidden, @deprecated */\n  static instance?: ObservableStore<any> = undefined;\n\n  /**\n   * Configures a Redux store and allows NgRedux to observe and dispatch\n   * to it.\n   *\n   * This should only be called once for the lifetime of your app, for\n   * example in the constructor of your root component.\n   *\n   * @param rootReducer Your app's root reducer\n   * @param initState Your app's initial state\n   * @param middleware Optional Redux middlewares\n   * @param enhancers Optional Redux store enhancers\n   */\n  abstract configureStore: (\n    rootReducer: Reducer<RootState, AnyAction>,\n    initState: RootState,\n    middleware?: Middleware[],\n    enhancers?: StoreEnhancer<RootState>[],\n  ) => void;\n\n  /**\n   * Accepts a Redux store, then sets it in NgRedux and\n   * allows NgRedux to observe and dispatch to it.\n   *\n   * This should only be called once for the lifetime of your app, for\n   * example in the constructor of your root component. If configureStore\n   * has been used this cannot be used.\n   *\n   * @param store Your app's store\n   */\n  abstract provideStore: (store: Store<RootState>) => void;\n\n  // Redux Store methods\n  abstract dispatch: Dispatch<AnyAction>;\n  abstract getState: () => RootState;\n  abstract subscribe: (listener: () => void) => Unsubscribe;\n  abstract replaceReducer: (nextReducer: Reducer<RootState, AnyAction>) => void;\n\n  // ObservableStore methods.\n  abstract select: <SelectedType>(\n    selector?: Selector<RootState, SelectedType>,\n    comparator?: Comparator,\n  ) => Observable<SelectedType>;\n  abstract configureSubStore: <SubState>(\n    basePath: PathSelector,\n    localReducer: Reducer<SubState, AnyAction>,\n  ) => ObservableStore<SubState>;\n}\n","import { ApplicationRef, Injectable, NgZone } from '@angular/core';\nimport { AnyAction, StoreEnhancer, Unsubscribe } from 'redux';\nimport { EnhancerOptions } from 'redux-devtools-extension';\nimport { NgRedux } from './ng-redux';\n\nexport interface ReduxDevTools {\n  (options: EnhancerOptions): StoreEnhancer<any>;\n  listen: (\n    onMessage: (message: AnyAction) => void,\n    instanceId?: string,\n  ) => void;\n}\n\ninterface WindowWithReduxDevTools extends Window {\n  __REDUX_DEVTOOLS_EXTENSION__?: ReduxDevTools;\n  devToolsExtension?: ReduxDevTools;\n}\n\nconst environment: WindowWithReduxDevTools = (typeof window !== 'undefined'\n  ? window\n  : {}) as WindowWithReduxDevTools;\n\n/**\n * An angular-2-ified version of the Redux DevTools chrome extension.\n */\n@Injectable()\nexport class DevToolsExtension {\n  /** @hidden */\n  constructor(private appRef: ApplicationRef, private ngRedux: NgRedux<any>) {}\n\n  /**\n   * A wrapper for the Chrome Extension Redux DevTools.\n   * Makes sure state changes triggered by the extension\n   * trigger Angular2's change detector.\n   *\n   * @argument options: dev tool options; same\n   * format as described here:\n   * [zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md]\n   */\n  enhancer = (options?: EnhancerOptions) => {\n    let subscription: Unsubscribe;\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    // Make sure changes from dev tools update angular's view.\n    this.getDevTools()!.listen(({ type }) => {\n      if (type === 'START') {\n        subscription = this.ngRedux.subscribe(() => {\n          if (!NgZone.isInAngularZone()) {\n            this.appRef.tick();\n          }\n        });\n      } else if (type === 'STOP') {\n        subscription();\n      }\n    });\n\n    return this.getDevTools()!(options || {});\n  };\n\n  /**\n   * Returns true if the extension is installed and enabled.\n   */\n  isEnabled = () => !!this.getDevTools();\n\n  /**\n   * Returns the redux devtools enhancer.\n   */\n  getDevTools = () =>\n    environment &&\n    (environment.__REDUX_DEVTOOLS_EXTENSION__ || environment.devToolsExtension);\n}\n","/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n */\nexport function getIn(\n  v: any | undefined,\n  pathElems: (string | number)[],\n): any | undefined {\n  if (!v) {\n    return v;\n  }\n\n  // If this is an ImmutableJS structure, use existing getIn function\n  if ('function' === typeof v.getIn) {\n    return v.getIn(pathElems);\n  }\n\n  const [firstElem, ...restElems] = pathElems;\n\n  if (undefined === v[firstElem]) {\n    return undefined;\n  }\n\n  if (restElems.length === 0) {\n    return v[firstElem];\n  }\n\n  return getIn(v[firstElem], restElems);\n}\n","/**\n * Sets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices. Path elements are created if\n * not there already. Does not mutate the given object.\n *\n * @hidden\n */\nexport const setIn = (\n  obj: any,\n  [firstElem, ...restElems]: (string | number)[],\n  value: any,\n): object =>\n  'function' === typeof (obj[firstElem] || {}).setIn\n    ? {\n        ...obj,\n        [firstElem]: obj[firstElem].setIn(restElems, value),\n      }\n    : {\n        ...obj,\n        [firstElem]:\n          restElems.length === 0\n            ? value\n            : setIn(obj[firstElem] || {}, restElems, value),\n      };\n","import { AnyAction, Reducer } from 'redux';\nimport { getIn } from '../utils/get-in';\nimport { setIn } from '../utils/set-in';\nimport { PathSelector } from './selectors';\n\nlet reducerMap: { [id: string]: Reducer<any, AnyAction> } = {};\n\nconst composeReducers = (\n  ...reducers: Reducer<any, AnyAction>[]\n): Reducer<any, AnyAction> => (state: any, action: AnyAction) =>\n  reducers.reduce((subState, reducer) => reducer(subState, action), state);\n\n/**\n * @param rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n */\nexport function enableFractalReducers(rootReducer: Reducer<any, AnyAction>) {\n  reducerMap = {};\n  return composeReducers(rootFractalReducer, rootReducer);\n}\n\n/** @hidden */\nexport function registerFractalReducer(\n  basePath: PathSelector,\n  localReducer: Reducer<any, AnyAction>,\n): void {\n  const existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n  if (existingFractalReducer && existingFractalReducer !== localReducer) {\n    throw new Error(\n      `attempt to overwrite fractal reducer for basePath ${basePath}`,\n    );\n  }\n\n  reducerMap[JSON.stringify(basePath)] = localReducer;\n}\n\n/** @hidden */\nexport function replaceLocalReducer(\n  basePath: PathSelector,\n  nextLocalReducer: Reducer<any, AnyAction>,\n): void {\n  reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\n\nfunction rootFractalReducer(\n  state: {} = {},\n  action: AnyAction & { '@angular-redux::fractalkey'?: string },\n) {\n  const fractalKey = action['@angular-redux::fractalkey'];\n  const fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n  const localReducer = reducerMap[fractalKey || ''];\n  return fractalKey && localReducer\n    ? setIn(state, fractalPath, localReducer(getIn(state, fractalPath), action))\n    : state;\n}\n","import { AnyAction, Reducer } from 'redux';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { NgRedux } from '../components/ng-redux';\nimport { ObservableStore } from '../components/observable-store';\nimport {\n  Comparator,\n  PathSelector,\n  Selector,\n  Transformer,\n} from '../components/selectors';\n\n/**\n * Used with the `@WithSubStore` class decorator to define a SubStore (AKA a\n * fractal store).\n *\n * For more info on substores, see\n * https://github.com/angular-redux/platform/blob/master/packages/store/articles/fractal-store.md\n */\nexport interface FractalStoreOptions {\n  /**\n   * The name of an instance method that will define the\n   * base path for the subStore. This method is expected to return an array\n   * of property names or undefined/null.\n   */\n  basePathMethodName: string;\n\n  /**\n   * The localReducer for the substore in question.\n   */\n  localReducer: Reducer<any, AnyAction>;\n}\n\n/**\n * OPTIONS_KEY: this is per-class (static) and holds the config from the\n * @SubStore decorator.\n */\nconst OPTIONS_KEY = '@angular-redux::substore::class::options';\n\n/**\n * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance\n * (non-static) and holds references to the substores/selected observables\n * to be used by an instance of a decorated class. I'm not using\n * reflect-metadata here because I want\n *\n * 1. different instances to have different substores in the case where\n * `basePathMethodName` is dynamic.\n * 2. the instance substore to be garbage collected when the instance is no\n * longer reachable.\n * This is therefore an own-property on the actual instance of the decorated\n * class.\n */\nconst INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';\nconst INSTANCE_SELECTIONS_KEY =\n  '@angular-redux::substore::instance::selections';\n\n/**\n * Used to detect when the base path changes - this allows components to\n * dynamically adjust their selections if necessary.\n */\nconst INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';\n\nconst getClassOptions = (decoratedInstance: any): FractalStoreOptions =>\n  decoratedInstance.constructor[OPTIONS_KEY];\n\n/** @hidden */\nexport const setClassOptions = (\n  decoratedClassConstructor: any,\n  options: FractalStoreOptions,\n): void => {\n  decoratedClassConstructor[OPTIONS_KEY] = options;\n};\n\n// I want the store to be saved on the actual instance so\n// 1. different instances can have distinct substores if necessary\n// 2. the substore/selections will be marked for garbage collection when the\n//    instance is destroyed.\nconst setInstanceStore = (\n  decoratedInstance: any,\n  store?: ObservableStore<any>,\n) => (decoratedInstance[INSTANCE_SUBSTORE_KEY] = store);\n\nconst getInstanceStore = (decoratedInstance: any): ObservableStore<any> =>\n  decoratedInstance[INSTANCE_SUBSTORE_KEY];\n\nconst getInstanceSelectionMap = (decoratedInstance: any) => {\n  const map = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = map;\n  return map;\n};\n\nconst hasBasePathChanged = (\n  decoratedInstance: any,\n  basePath?: PathSelector,\n): boolean =>\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();\n\nconst setInstanceBasePath = (\n  decoratedInstance: any,\n  basePath?: PathSelector,\n): void => {\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();\n};\n\nconst clearInstanceState = (decoratedInstance: any) => {\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;\n  decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;\n};\n\n/**\n * Gets the store associated with a decorated instance (e.g. a\n * component or service)\n * @hidden\n */\nexport const getBaseStore = (\n  decoratedInstance: any,\n): ObservableStore<any> | undefined => {\n  // The root store hasn't been set up yet.\n  if (!NgRedux.instance) {\n    return undefined;\n  }\n\n  const options = getClassOptions(decoratedInstance);\n\n  // This is not decorated with `@WithSubStore`. Return the root store.\n  if (!options) {\n    return NgRedux.instance;\n  }\n\n  // Dynamic base path support:\n  const basePath = decoratedInstance[options.basePathMethodName]();\n  if (hasBasePathChanged(decoratedInstance, basePath)) {\n    clearInstanceState(decoratedInstance);\n    setInstanceBasePath(decoratedInstance, basePath);\n  }\n\n  if (!basePath) {\n    return NgRedux.instance;\n  }\n\n  const store = getInstanceStore(decoratedInstance);\n  if (!store) {\n    setInstanceStore(\n      decoratedInstance,\n      NgRedux.instance.configureSubStore(basePath, options.localReducer),\n    );\n  }\n\n  return getInstanceStore(decoratedInstance);\n};\n\n/**\n * Creates an Observable from the given selection parameters,\n * rooted at decoratedInstance's store, and caches it on the\n * instance for future use.\n * @hidden\n */\nexport const getInstanceSelection = <T>(\n  decoratedInstance: any,\n  key: string | symbol,\n  selector: Selector<any, T>,\n  transformer?: Transformer<any, T>,\n  comparator?: Comparator,\n) => {\n  const store = getBaseStore(decoratedInstance);\n\n  if (store) {\n    const selections = getInstanceSelectionMap(decoratedInstance);\n\n    selections[key] =\n      selections[key] ||\n      (!transformer\n        ? store.select(selector, comparator)\n        : store.select(selector).pipe(\n            obs$ => transformer(obs$, decoratedInstance),\n            distinctUntilChanged(comparator),\n          ));\n\n    return selections[key];\n  }\n\n  return undefined;\n};\n","import { Action } from 'redux';\n\nimport { NgRedux } from '../components/ng-redux';\nimport { getBaseStore } from './helpers';\n\n/**\n * Auto-dispatches the return value of the decorated function.\n *\n * Decorate a function creator method with @dispatch and its return\n * value will automatically be passed to ngRedux.dispatch() for you.\n */\nexport function dispatch(): PropertyDecorator {\n  return function decorate(\n    target: object,\n    key: string | symbol | number,\n    descriptor?: PropertyDescriptor,\n  ): PropertyDescriptor {\n    let originalMethod: () => Action;\n\n    const wrapped = function(this: unknown, ...args: any) {\n      const result = originalMethod.apply(this, args);\n      if (result !== undefined) {\n        const store = getBaseStore(this) || NgRedux.instance;\n        if (store) {\n          store.dispatch(result);\n        }\n      }\n      return result;\n    };\n\n    descriptor = descriptor || Object.getOwnPropertyDescriptor(target, key);\n\n    if (descriptor === undefined) {\n      const dispatchDescriptor: PropertyDescriptor = {\n        get: () => wrapped,\n        set: setMethod => (originalMethod = setMethod),\n      };\n      Object.defineProperty(target, key, dispatchDescriptor);\n      return dispatchDescriptor;\n    } else {\n      originalMethod = descriptor.value;\n      descriptor.value = wrapped;\n      return descriptor;\n    }\n  };\n}\n// get descriptor\n// if no descriptor, create one with getter setter\n// if descriptor, set original method to descriptor, and then bind the wrapped function instead\n","import { Comparator, Selector, Transformer } from '../components/selectors';\nimport { getInstanceSelection } from './helpers';\n\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '@angular-redux/store';\n *\n *  class SomeClass {\n *    @select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @param selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param comparator Function used to determine if this selector has changed.\n */\nexport function select<T>(\n  selector?: Selector<any, T>,\n  comparator?: Comparator,\n): PropertyDecorator {\n  return (target: any, key: string | symbol): void => {\n    const adjustedSelector = selector\n      ? selector\n      : String(key).lastIndexOf('$') === String(key).length - 1\n      ? String(key).substring(0, String(key).length - 1)\n      : key;\n    decorate(adjustedSelector, undefined, comparator)(target, key);\n  };\n}\n\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n *  @select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n */\nexport function select$<T>(\n  selector: Selector<any, T>,\n  transformer: Transformer<any, T>,\n  comparator?: Comparator,\n): PropertyDecorator {\n  return decorate(selector, transformer, comparator);\n}\n\nfunction decorate(\n  selector: Selector<any, any>,\n  transformer?: Transformer<any, any>,\n  comparator?: Comparator,\n): PropertyDecorator {\n  return function decorator(target: any, key): void {\n    function getter(this: any) {\n      return getInstanceSelection(this, key, selector, transformer, comparator);\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    if (delete target[key]) {\n      Object.defineProperty(target, key, {\n        get: getter,\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  };\n}\n","import { FractalStoreOptions, setClassOptions } from './helpers';\n\n/**\n * Modifies the behaviour of any `@select`, `@select$`, or `@dispatch`\n * decorators to operate on a substore defined by the IFractalStoreOptions.\n *\n * See:\n * https://github.com/angular-redux/platform/blob/master/packages/store/articles/fractal-store.md\n * for more information about SubStores.\n */\nexport function WithSubStore({\n  basePathMethodName,\n  localReducer,\n}: FractalStoreOptions): ClassDecorator {\n  return function decorate(constructor: Function): void {\n    setClassOptions(constructor, {\n      basePathMethodName,\n      localReducer,\n    });\n  };\n}\n","/** @hidden */\nexport const assert = (condition: boolean, message: string): void => {\n  if (!condition) {\n    throw new Error(message);\n  }\n};\n","import { Observable } from 'rxjs';\nimport { getIn } from '../utils/get-in';\n\n/**\n * Custom equality checker that can be used with `.select` and `@select`.\n * ```ts\n * const customCompare: Comparator = (x: any, y: any) => {\n *  return x.id === y.id\n * }\n *\n * @select(selector, customCompare)\n * ```\n */\nexport type Comparator = (x: any, y: any) => boolean;\nexport type Transformer<RootState, V> = (\n  store$: Observable<RootState>,\n  scope: any,\n) => Observable<V>;\nexport type PropertySelector = string | number | symbol;\nexport type PathSelector = (string | number)[];\nexport type FunctionSelector<RootState, S> = (s: RootState) => S;\nexport type Selector<RootState, S> =\n  | PropertySelector\n  | PathSelector\n  | FunctionSelector<RootState, S>;\n\n/** @hidden */\nexport const sniffSelectorType = <RootState, S>(\n  selector?: Selector<RootState, S>,\n) =>\n  !selector\n    ? 'nil'\n    : Array.isArray(selector)\n    ? 'path'\n    : 'function' === typeof selector\n    ? 'function'\n    : 'property';\n\n/** @hidden */\nexport const resolver = <RootState, S>(selector?: Selector<RootState, S>) => ({\n  property: (state: any) =>\n    state ? state[selector as PropertySelector] : undefined,\n  path: (state: RootState) => getIn(state, selector as PathSelector),\n  function: selector as FunctionSelector<RootState, S>,\n  nil: (state: RootState) => state,\n});\n\n/** @hidden */\nexport const resolveToFunctionSelector = <RootState, S>(\n  selector?: Selector<RootState, S>,\n) => resolver(selector)[sniffSelectorType(selector)];\n","import { AnyAction, Dispatch, Reducer } from 'redux';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { getIn } from '../utils/get-in';\nimport {\n  registerFractalReducer,\n  replaceLocalReducer,\n} from './fractal-reducer-map';\nimport { NgRedux } from './ng-redux';\nimport { ObservableStore } from './observable-store';\nimport {\n  Comparator,\n  PathSelector,\n  resolveToFunctionSelector,\n  Selector,\n} from './selectors';\n\n/** @hidden */\nexport class SubStore<State> implements ObservableStore<State> {\n  constructor(\n    private rootStore: NgRedux<any>,\n    private basePath: PathSelector,\n    localReducer: Reducer<State, AnyAction>,\n  ) {\n    registerFractalReducer(basePath, localReducer);\n  }\n\n  dispatch: Dispatch<AnyAction> = action =>\n    this.rootStore.dispatch({\n      ...(action as any),\n      '@angular-redux::fractalkey': JSON.stringify(this.basePath),\n    });\n\n  getState = (): State => getIn(this.rootStore.getState(), this.basePath);\n\n  configureSubStore = <SubState>(\n    basePath: PathSelector,\n    localReducer: Reducer<SubState, AnyAction>,\n  ): ObservableStore<SubState> =>\n    new SubStore<SubState>(\n      this.rootStore,\n      [...this.basePath, ...basePath],\n      localReducer,\n    );\n\n  select = <SelectedState>(\n    selector?: Selector<State, SelectedState>,\n    comparator?: Comparator,\n  ): Observable<SelectedState> =>\n    this.rootStore.select<State>(this.basePath).pipe(\n      map(resolveToFunctionSelector(selector)),\n      distinctUntilChanged(comparator),\n    );\n\n  subscribe = (listener: () => void): (() => void) => {\n    const subscription = this.select().subscribe(listener);\n    return () => subscription.unsubscribe();\n  };\n\n  replaceReducer = (nextLocalReducer: Reducer<State, AnyAction>) =>\n    replaceLocalReducer(this.basePath, nextLocalReducer);\n}\n","import {\n  AnyAction,\n  applyMiddleware,\n  compose,\n  createStore,\n  Dispatch,\n  Middleware,\n  Reducer,\n  Store,\n  StoreCreator,\n  StoreEnhancer,\n  Unsubscribe,\n} from 'redux';\n\nimport { NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, Observer } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { assert } from '../utils/assert';\nimport { enableFractalReducers } from './fractal-reducer-map';\nimport { NgRedux } from './ng-redux';\nimport { ObservableStore } from './observable-store';\nimport {\n  Comparator,\n  PathSelector,\n  resolveToFunctionSelector,\n  Selector,\n} from './selectors';\nimport { SubStore } from './sub-store';\n\n/** @hidden */\nexport class RootStore<RootState> extends NgRedux<RootState> {\n  private store: Store<RootState> | undefined = undefined;\n  private store$: BehaviorSubject<RootState>;\n\n  constructor(private ngZone: NgZone) {\n    super();\n\n    NgRedux.instance = this;\n    this.store$ = new BehaviorSubject<RootState | undefined>(undefined).pipe(\n      filter(n => n !== undefined),\n      switchMap(observableStore => observableStore as any),\n      // TODO: fix this? needing to explicitly cast this is wrong\n    ) as BehaviorSubject<RootState>;\n  }\n\n  configureStore = (\n    rootReducer: Reducer<RootState, AnyAction>,\n    initState: RootState,\n    middleware: Middleware[] = [],\n    enhancers: StoreEnhancer<RootState>[] = [],\n  ): void => {\n    assert(!this.store, 'Store already configured!');\n    // Variable-arity compose in typescript FTW.\n    this.setStore(\n      compose<StoreCreator>(\n        applyMiddleware(...middleware),\n        ...enhancers,\n      )(createStore)(enableFractalReducers(rootReducer), initState),\n    );\n  };\n\n  provideStore = (store: Store<RootState>) => {\n    assert(!this.store, 'Store already configured!');\n    this.setStore(store);\n  };\n\n  getState = (): RootState => this.store!.getState();\n\n  subscribe = (listener: () => void): Unsubscribe =>\n    this.store!.subscribe(listener);\n\n  replaceReducer = (nextReducer: Reducer<RootState, AnyAction>): void => {\n    this.store!.replaceReducer(nextReducer);\n  };\n\n  dispatch: Dispatch<AnyAction> = <A extends AnyAction>(action: A): A => {\n    assert(\n      !!this.store,\n      'Dispatch failed: did you forget to configure your store? ' +\n        'https://github.com/angular-redux/platform/blob/master/packages/store/' +\n        'README.md#quick-start',\n    );\n\n    if (!NgZone.isInAngularZone()) {\n      return this.ngZone.run(() => this.store!.dispatch(action));\n    } else {\n      return this.store!.dispatch(action);\n    }\n  };\n\n  select = <SelectedType>(\n    selector?: Selector<RootState, SelectedType>,\n    comparator?: Comparator,\n  ): Observable<SelectedType> =>\n    this.store$.pipe(\n      distinctUntilChanged(),\n      map(resolveToFunctionSelector(selector)),\n      distinctUntilChanged(comparator),\n    );\n\n  configureSubStore = <SubState>(\n    basePath: PathSelector,\n    localReducer: Reducer<SubState, AnyAction>,\n  ): ObservableStore<SubState> =>\n    new SubStore<SubState>(this, basePath, localReducer);\n\n  private setStore(store: Store<RootState>) {\n    this.store = store;\n    const storeServable = this.storeToObservable(store);\n    this.store$.next(storeServable as any);\n  }\n\n  private storeToObservable = (\n    store: Store<RootState>,\n  ): Observable<RootState> =>\n    new Observable<RootState>((observer: Observer<RootState>) => {\n      observer.next(store.getState());\n      const unsubscribeFromRedux = store.subscribe(() =>\n        observer.next(store.getState()),\n      );\n      return () => {\n        unsubscribeFromRedux();\n        observer.complete();\n      };\n    });\n}\n","import { NgModule, NgZone } from '@angular/core';\nimport { DevToolsExtension } from './components/dev-tools';\nimport { NgRedux } from './components/ng-redux';\nimport { RootStore } from './components/root-store';\n\n/** @hidden */\nexport function _ngReduxFactory(ngZone: NgZone) {\n  return new RootStore(ngZone);\n}\n\n@NgModule({\n  providers: [\n    DevToolsExtension,\n    { provide: NgRedux, useFactory: _ngReduxFactory, deps: [NgZone] },\n  ],\n})\nexport class NgReduxModule {}\n"],"names":["map","tslib_1.__extends"],"mappings":"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"}
