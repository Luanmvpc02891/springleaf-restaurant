/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This interface represents the glue that connects the
 * subscription-oriented Redux Store with the RXJS Observable-oriented
 * Angular component world.
 *
 * Augments the basic Redux store interface with methods to
 * enable selection and fractalization.
 * @record
 * @template StateType
 */
export function ObservableStore() { }
if (false) {
    /**
     * Select a slice of state to expose as an observable.
     *
     * \@typeparam S
     * \@param selector key or function to select a part of the state
     * \@param [comparator] Optional
     * comparison function called to test if an item is distinct
     * from the previous item in the source.
     *
     * \@return An Observable that emits items from the
     * source Observable with distinct values.
     * @type {?}
     */
    ObservableStore.prototype.select;
    /**
     * Carves off a 'subStore' or 'fractal' store from this one.
     *
     * The returned object is itself an observable store, however any
     * selections, dispatches, or invocations of localReducer will be
     * specific to that substore and will not know about the parent
     * ObservableStore from which it was created.
     *
     * This is handy for encapsulating component or module state while
     * still benefiting from time-travel, etc.
     * @type {?}
     */
    ObservableStore.prototype.configureSubStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS1zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLXJlZHV4L3N0b3JlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9vYnNlcnZhYmxlLXN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBWUEscUNBaUNDOzs7Ozs7Ozs7Ozs7Ozs7SUFwQkMsaUNBRzhCOzs7Ozs7Ozs7Ozs7O0lBYTlCLDRDQUcrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFueUFjdGlvbiwgUmVkdWNlciwgU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb21wYXJhdG9yLCBQYXRoU2VsZWN0b3IsIFNlbGVjdG9yIH0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuXG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIGdsdWUgdGhhdCBjb25uZWN0cyB0aGVcbiAqIHN1YnNjcmlwdGlvbi1vcmllbnRlZCBSZWR1eCBTdG9yZSB3aXRoIHRoZSBSWEpTIE9ic2VydmFibGUtb3JpZW50ZWRcbiAqIEFuZ3VsYXIgY29tcG9uZW50IHdvcmxkLlxuICpcbiAqIEF1Z21lbnRzIHRoZSBiYXNpYyBSZWR1eCBzdG9yZSBpbnRlcmZhY2Ugd2l0aCBtZXRob2RzIHRvXG4gKiBlbmFibGUgc2VsZWN0aW9uIGFuZCBmcmFjdGFsaXphdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlU3RvcmU8U3RhdGVUeXBlPiBleHRlbmRzIFN0b3JlPFN0YXRlVHlwZT4ge1xuICAvKipcbiAgICogU2VsZWN0IGEgc2xpY2Ugb2Ygc3RhdGUgdG8gZXhwb3NlIGFzIGFuIG9ic2VydmFibGUuXG4gICAqXG4gICAqIEB0eXBlcGFyYW0gU1xuICAgKiBAcGFyYW0gc2VsZWN0b3Iga2V5IG9yIGZ1bmN0aW9uIHRvIHNlbGVjdCBhIHBhcnQgb2YgdGhlIHN0YXRlXG4gICAqIEBwYXJhbSBbY29tcGFyYXRvcl0gT3B0aW9uYWxcbiAgICogY29tcGFyaXNvbiBmdW5jdGlvbiBjYWxsZWQgdG8gdGVzdCBpZiBhbiBpdGVtIGlzIGRpc3RpbmN0XG4gICAqIGZyb20gdGhlIHByZXZpb3VzIGl0ZW0gaW4gdGhlIHNvdXJjZS5cbiAgICpcbiAgICogQHJldHVybnMgQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGZyb20gdGhlXG4gICAqIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGggZGlzdGluY3QgdmFsdWVzLlxuICAgKi9cbiAgc2VsZWN0OiA8U2VsZWN0ZWRUeXBlPihcbiAgICBzZWxlY3RvcjogU2VsZWN0b3I8U3RhdGVUeXBlLCBTZWxlY3RlZFR5cGU+LFxuICAgIGNvbXBhcmF0b3I/OiBDb21wYXJhdG9yLFxuICApID0+IE9ic2VydmFibGU8U2VsZWN0ZWRUeXBlPjtcblxuICAvKipcbiAgICogQ2FydmVzIG9mZiBhICdzdWJTdG9yZScgb3IgJ2ZyYWN0YWwnIHN0b3JlIGZyb20gdGhpcyBvbmUuXG4gICAqXG4gICAqIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgaXRzZWxmIGFuIG9ic2VydmFibGUgc3RvcmUsIGhvd2V2ZXIgYW55XG4gICAqIHNlbGVjdGlvbnMsIGRpc3BhdGNoZXMsIG9yIGludm9jYXRpb25zIG9mIGxvY2FsUmVkdWNlciB3aWxsIGJlXG4gICAqIHNwZWNpZmljIHRvIHRoYXQgc3Vic3RvcmUgYW5kIHdpbGwgbm90IGtub3cgYWJvdXQgdGhlIHBhcmVudFxuICAgKiBPYnNlcnZhYmxlU3RvcmUgZnJvbSB3aGljaCBpdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogVGhpcyBpcyBoYW5keSBmb3IgZW5jYXBzdWxhdGluZyBjb21wb25lbnQgb3IgbW9kdWxlIHN0YXRlIHdoaWxlXG4gICAqIHN0aWxsIGJlbmVmaXRpbmcgZnJvbSB0aW1lLXRyYXZlbCwgZXRjLlxuICAgKi9cbiAgY29uZmlndXJlU3ViU3RvcmU6IDxTdWJTdGF0ZT4oXG4gICAgYmFzZVBhdGg6IFBhdGhTZWxlY3RvcixcbiAgICBsb2NhbFJlZHVjZXI6IFJlZHVjZXI8U3ViU3RhdGUsIEFueUFjdGlvbj4sXG4gICkgPT4gT2JzZXJ2YWJsZVN0b3JlPFN1YlN0YXRlPjtcbn1cbiJdfQ==