{"version":3,"file":"angular-redux-store-testing.js.map","sources":["ng://@angular-redux/store/testing/dev-tools.mock.ts","ng://@angular-redux/store/testing/observable-store.mock.ts","ng://@angular-redux/store/testing/ng-redux.mock.ts","ng://@angular-redux/store/testing/ng-redux-testing.module.ts"],"sourcesContent":["// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { DevToolsExtension } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MockDevToolsExtension extends DevToolsExtension {}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { Comparator, PathSelector, Selector } from '@angular-redux/store';\nimport { AnyAction, Dispatch, Reducer } from 'redux';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n/** @hidden */\nexport interface SelectorStubRecord {\n  subject: Subject<any>;\n  comparator: Comparator;\n}\n\n/** @hidden */\nexport interface SelectorStubMap {\n  [selector: string]: SelectorStubRecord;\n}\n\n/** @hidden */\nexport interface SubStoreStubMap {\n  [basePath: string]: MockObservableStore<any>;\n}\n\n/** @hidden */\nexport class MockObservableStore<State> {\n  selections: SelectorStubMap = {};\n  subStores: SubStoreStubMap = {};\n\n  getSelectorStub = <SelectedState>(\n    selector?: Selector<State, SelectedState>,\n    comparator?: Comparator,\n  ): Subject<SelectedState> =>\n    this.initSelectorStub<SelectedState>(selector, comparator).subject;\n\n  reset = () => {\n    Object.keys(this.subStores).forEach(k => this.subStores[k].reset());\n    this.selections = {};\n    this.subStores = {};\n  };\n\n  dispatch: Dispatch<AnyAction> = action => action;\n  replaceReducer = () => null;\n  getState = () => ({});\n  subscribe = () => () => null;\n\n  select = <SelectedState>(\n    selector?: Selector<any, SelectedState>,\n    comparator?: Comparator,\n  ): Observable<any> => {\n    const stub = this.initSelectorStub<SelectedState>(selector, comparator);\n    return stub.comparator\n      ? stub.subject.pipe(distinctUntilChanged(stub.comparator))\n      : stub.subject;\n  };\n\n  configureSubStore = <SubState>(\n    basePath: PathSelector,\n    _: Reducer<SubState, AnyAction>,\n  ): MockObservableStore<SubState> => this.initSubStore<SubState>(basePath);\n\n  getSubStore = <SubState>(\n    ...pathSelectors: PathSelector[]\n  ): MockObservableStore<any> => {\n    const [first, ...rest] = pathSelectors;\n    return (first\n      ? this.initSubStore(first).getSubStore(...rest)\n      : this) as MockObservableStore<SubState>;\n  };\n\n  private initSubStore<SubState>(basePath: PathSelector) {\n    const result =\n      this.subStores[JSON.stringify(basePath)] ||\n      new MockObservableStore<SubState>();\n    this.subStores[JSON.stringify(basePath)] = result;\n    return result;\n  }\n\n  private initSelectorStub<SelectedState>(\n    selector?: Selector<State, SelectedState>,\n    comparator?: Comparator,\n  ): SelectorStubRecord {\n    const key = selector ? selector.toString() : '';\n    const record = this.selections[key] || {\n      subject: new ReplaySubject<SelectedState>(),\n      comparator,\n    };\n\n    this.selections[key] = record;\n    return record;\n  }\n}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\n// tslint:disable:member-ordering\nimport {\n  Comparator,\n  NgRedux,\n  PathSelector,\n  Selector,\n} from '@angular-redux/store';\nimport {\n  AnyAction,\n  Dispatch,\n  Middleware,\n  Reducer,\n  Store,\n  StoreEnhancer,\n} from 'redux';\nimport { Observable, Subject } from 'rxjs';\nimport { MockObservableStore } from './observable-store.mock';\n/**\n * Convenience mock to make it easier to control selector\n * behaviour in unit tests.\n */\nexport class MockNgRedux<T = {}> extends NgRedux<T> {\n  /** @deprecated Use MockNgRedux.getInstance() instead. */\n  static mockInstance?: MockNgRedux<any> = undefined;\n\n  /**\n   * Returns a subject that's connected to any observable returned by the\n   * given selector. You can use this subject to pump values into your\n   * components or services under test; when they call .select or @select\n   * in the context of a unit test, MockNgRedux will give them the values\n   * you pushed onto your stub.\n   */\n  static getSelectorStub<R, S>(\n    selector?: Selector<R, S>,\n    comparator?: Comparator,\n  ): Subject<S> {\n    return MockNgRedux.getInstance().mockRootStore.getSelectorStub<S>(\n      selector,\n      comparator,\n    );\n  }\n\n  /**\n   * Returns a mock substore that allows you to set up selectorStubs for\n   * any 'fractal' stores your app creates with NgRedux.configureSubStore.\n   *\n   * If your app creates deeply nested substores from other substores,\n   * pass the chain of pathSelectors in as ordered arguments to mock\n   * the nested substores out.\n   * @param pathSelectors\n   */\n  static getSubStore<S>(\n    ...pathSelectors: PathSelector[]\n  ): MockObservableStore<S> {\n    return pathSelectors.length\n      ? MockNgRedux.getInstance().mockRootStore.getSubStore(...pathSelectors)\n      : MockNgRedux.getInstance().mockRootStore;\n  }\n\n  /**\n   * Reset all previously configured stubs.\n   */\n  static reset(): void {\n    MockNgRedux.getInstance().mockRootStore.reset();\n    NgRedux.instance = MockNgRedux.mockInstance as any;\n  }\n\n  /**\n   * Gets the singleton MockNgRedux instance. Useful for cases where your\n   * tests need to spy on store methods, for example.\n   */\n  static getInstance() {\n    MockNgRedux.mockInstance = MockNgRedux.mockInstance || new MockNgRedux();\n    return MockNgRedux.mockInstance;\n  }\n  //\n  private mockRootStore = new MockObservableStore<any>();\n\n  configureSubStore = this.mockRootStore.configureSubStore as any;\n  dispatch = this.mockRootStore.dispatch as Dispatch<any>;\n  getState = this.mockRootStore.getState as any;\n  subscribe = this.mockRootStore.subscribe;\n  replaceReducer = this.mockRootStore.replaceReducer;\n  select: <SelectedType>(\n    selector?: Selector<T, SelectedType>,\n    comparator?: Comparator,\n  ) => Observable<SelectedType> = this.mockRootStore.select;\n\n  /** @hidden */\n  constructor() {\n    super();\n    // This hooks the mock up to @select.\n    NgRedux.instance = this as any;\n  }\n\n  provideStore = (_: Store<any>): void => undefined;\n  configureStore = (\n    _: Reducer<any, AnyAction>,\n    __: any,\n    ___?: Middleware[],\n    ____?: StoreEnhancer<any>[],\n  ): void => undefined;\n}\n","// TODO: See if this linting rule can be enabled with new build process (ng-packagr)\n// tslint:disable:no-implicit-dependencies\nimport { DevToolsExtension, NgRedux } from '@angular-redux/store';\nimport { NgModule } from '@angular/core';\nimport { MockDevToolsExtension } from './dev-tools.mock';\nimport { MockNgRedux } from './ng-redux.mock';\n\n// Needs to be initialized early so @select's use the mocked version too.\nconst mockNgRedux = MockNgRedux.getInstance();\n\n/** @hidden */\nexport function _mockNgReduxFactory() {\n  return mockNgRedux;\n}\n\n@NgModule({\n  imports: [],\n  providers: [\n    { provide: NgRedux, useFactory: _mockNgReduxFactory },\n    { provide: DevToolsExtension, useClass: MockDevToolsExtension },\n  ],\n})\nexport class NgReduxTestingModule {}\n"],"names":[],"mappings":"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"}
