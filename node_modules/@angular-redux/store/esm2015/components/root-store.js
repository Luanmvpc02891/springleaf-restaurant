/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { applyMiddleware, compose, createStore, } from 'redux';
import { NgZone } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import { assert } from '../utils/assert';
import { enableFractalReducers } from './fractal-reducer-map';
import { NgRedux } from './ng-redux';
import { resolveToFunctionSelector, } from './selectors';
import { SubStore } from './sub-store';
/**
 * @hidden
 * @template RootState
 */
export class RootStore extends NgRedux {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        super();
        this.ngZone = ngZone;
        this.store = undefined;
        this.configureStore = (rootReducer, initState, middleware = [], enhancers = []) => {
            assert(!this.store, 'Store already configured!');
            // Variable-arity compose in typescript FTW.
            this.setStore(compose(applyMiddleware(...middleware), ...enhancers)(createStore)(enableFractalReducers(rootReducer), initState));
        };
        this.provideStore = (store) => {
            assert(!this.store, 'Store already configured!');
            this.setStore(store);
        };
        this.getState = () => (/** @type {?} */ (this.store)).getState();
        this.subscribe = (listener) => (/** @type {?} */ (this.store)).subscribe(listener);
        this.replaceReducer = (nextReducer) => {
            (/** @type {?} */ (this.store)).replaceReducer(nextReducer);
        };
        this.dispatch = (action) => {
            assert(!!this.store, 'Dispatch failed: did you forget to configure your store? ' +
                'https://github.com/angular-redux/platform/blob/master/packages/store/' +
                'README.md#quick-start');
            if (!NgZone.isInAngularZone()) {
                return this.ngZone.run(() => (/** @type {?} */ (this.store)).dispatch(action));
            }
            else {
                return (/** @type {?} */ (this.store)).dispatch(action);
            }
        };
        this.select = (selector, comparator) => this.store$.pipe(distinctUntilChanged(), map(resolveToFunctionSelector(selector)), distinctUntilChanged(comparator));
        this.configureSubStore = (basePath, localReducer) => new SubStore(this, basePath, localReducer);
        this.storeToObservable = (store) => new Observable((observer) => {
            observer.next(store.getState());
            /** @type {?} */
            const unsubscribeFromRedux = store.subscribe(() => observer.next(store.getState()));
            return () => {
                unsubscribeFromRedux();
                observer.complete();
            };
        });
        NgRedux.instance = this;
        this.store$ = (/** @type {?} */ (new BehaviorSubject(undefined).pipe(filter(n => n !== undefined), switchMap(observableStore => (/** @type {?} */ (observableStore))))));
    }
    /**
     * @private
     * @param {?} store
     * @return {?}
     */
    setStore(store) {
        this.store = store;
        /** @type {?} */
        const storeServable = this.storeToObservable(store);
        this.store$.next((/** @type {?} */ (storeServable)));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    RootStore.prototype.store;
    /**
     * @type {?}
     * @private
     */
    RootStore.prototype.store$;
    /** @type {?} */
    RootStore.prototype.configureStore;
    /** @type {?} */
    RootStore.prototype.provideStore;
    /** @type {?} */
    RootStore.prototype.getState;
    /** @type {?} */
    RootStore.prototype.subscribe;
    /** @type {?} */
    RootStore.prototype.replaceReducer;
    /** @type {?} */
    RootStore.prototype.dispatch;
    /** @type {?} */
    RootStore.prototype.select;
    /** @type {?} */
    RootStore.prototype.configureSubStore;
    /**
     * @type {?}
     * @private
     */
    RootStore.prototype.storeToObservable;
    /**
     * @type {?}
     * @private
     */
    RootStore.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,